/*
 * Elastic COBOL --> Java Source Code
 *
 * This is a cross-compiler generated Java source-code file whose original
 * source was a COBOL program of the same name.
 *
 * If you want to switch from COBOL maintenance to Java maintenance, you must:
 * 1. edit this file as you see fit,
 * 2. move the resultant file to the java_source folder, and
 * 3. delete the originally named COBOL source file.
 *
 * This program requires ecobol.jar and may also require etrans.jar to execute.
 * These are the Elastic COBOL runtime services (used under license).
 */

import com.heirloomcomputing.ecs.exec.*;

/*
 * PROGRAM-ID calljava
 * Compiled on 2018-12-13 at 10:17:36
 *
 * Generated by:
 * 
 * Elastic COBOL
 * V18.12.2 (Build Dec  2 2018 18:49:17)
 * Copyright (C) 2010-2018 Heirloom Computing
 */

@SuppressWarnings("all")
public class calljava extends CobolBase
implements ICobolProgram, com.heirloomcomputing.ecs.api.ICallTarget, com.heirloomcomputing.ecs.api.ICancelTarget 
{
    static public final String _programId="calljava";
    BreakClass breakPoint = new BreakClass();
    int _debugmarker = 0;
    
    public String toString()
    {
        return "PROGRAM CALLJAVA ("+super.toString()+"):"+String.valueOf(_context);
    }
    
    
    static // initializer
    {
        RuntimeEnvironment.setGlobalParameter("DT","0");
        Variable.completeInitialization();
    }
    
    
    @SuppressWarnings("all")
    public class Wrk              implements Section
    {
        public String toString()
        {
            return "WORKING-STORAGE SECTION";
        }
        
        public void doDeclarations()
        {
            try
            {
                declarations();
            }
            catch(Exception _initializerException)
            {
                CobolException.runtimeError(_context,"INTERNAL ERROR: Cannot initialize variable storage for calljava section 'Wrk'",_initializerException);
            }
        }
        
        
        public void doInitializations()
        {
            param_0=new Variable();
            param_1=new DisplayP();
            param_2=new Variable();
            _Variable=new Variable();
            _Comp1=new Comp1();
            _DisplayP=new DisplayP();
            param_3=new Variable();
            item_element_OF_param_4=new Variable();
            param_4=new Variable();
            param_6=new BinaryRev();
        }
        
        public void declarations()
        {
            final Memory _memory=this._memory;
            param_0.declare(_memory,0,10,"param-0",null,"hello",null,null,param_1,0x00000000);
            param_1.declare(_memory,10,5,"param-1",5,"123.45",null,null,param_2,0x04000000,2,0);
            param_2.declare(_memory,15,6,"param-2","999.99","999.99","678.90",null,null,param_3,0x0c000000,2,0);
            _Variable.reset().declare(_memory,21,10,null,null,"in group",param_3,null,null,0x00000000).notifyParent();
            _Comp1.reset().declare(_memory,31,4,null,null,"3.141",param_3,null,null,0x04000000).notifyParent();
            _DisplayP.reset().declare(_memory,35,3,null,3,"987",param_3,null,null,0x04000000).notifyParent();
            param_3.declare(_memory,21,17,"param-3",null,null,null,null,param_4,0x00000000);
            item_element_OF_param_4.declare(_memory,38,10,"item-element",null,null,param_4,null,null,0x00000000);
            param_4.declare(_memory,38,10,"param-4",null,null,null,item_element_OF_param_4,param_6,0x00000000,1,10,null);
            param_6.declare(_memory,138,4,"param-6",10,"-765",null,null,null,0x04400010);
            Variable.setUnusedVarsSizes(wrk.param_0);
            
            
            // Declare Java Arrays
            item_element_OF_param_4__1=item_element_OF_param_4.createArray1();            
            
        } // end declarations
        
        public java.lang.String param_5=null;
        public  Variable param_0;
        public  DisplayP param_1;
        public  Variable param_2;
        public Variable _Variable;
        public Comp1 _Comp1;
        public DisplayP _DisplayP;
        public  Variable param_3;
        public  Variable item_element_OF_param_4;
        public  Variable param_4;
        public  BinaryRev param_6;
        
        
        // Create Java Arrays
        public Variable item_element_OF_param_4__1[];        
        
        protected final Memory _memory=new UnbufferedMemory(142,"calljava.Wrk");
        
    } // end Wrk
    public transient Wrk wrk=null; // instance accessor for data section
    
    public java.lang.Object call(Context _passContext)
    {
        setup(_passContext);
        return callGiving();
    }
    
    public java.lang.Object call(Context _passContext,parameterList _param)
    {
        setup(_passContext);
        return callGiving(_param);
    }
    
    public java.lang.Object callGiving()
    {
        call();
        return _context.getReturnCode();
    }
    
    public void call()
    {
        setup(_context);
        _context.setProgramCalled();
        run(-1,0);
    } // end call
    
    public java.lang.Object call(boolean[] _byRef,java.lang.Object[] _param)
    {
        return callGiving(new parameterList(_byRef,_param));
    }
    
    public java.lang.Object callGiving(parameterList _param)
    {
        call(_param);
        return _context.getReturnCode();
    }
    
    public void call(parameterList _param)
    {
        if(_context==null) setup(_context);
        _context.setProgramCalled();
        run(-1,0); // no parameters expected
    } // end call(parameterList)
    
    static public final int _defaultsection_0_Label=2;
    static public final int _main_paragraph_OF_defaultsection_0_Label=1;
    
    public final int main_paragraph_OF_defaultsection_0()
    {
        final Wrk wrk=this.wrk;
        wrk.item_element_OF_param_4__1[1].move("a");
        wrk.item_element_OF_param_4__1[2].move("b");
        wrk.item_element_OF_param_4__1[3].move("c");
        wrk.item_element_OF_param_4__1[4].move("d");
        wrk.item_element_OF_param_4__1[5].move("e");
        wrk.item_element_OF_param_4__1[6].move("f");
        wrk.item_element_OF_param_4__1[7].move("g");
        wrk.item_element_OF_param_4__1[8].move("h");
        wrk.item_element_OF_param_4__1[9].move("i");
        wrk.item_element_OF_param_4__1[10].move("j");
        boolean _sizeError=false;
        try
        {
            wrk.param_5=(java.lang.String)(new java.lang.String("Java Object"));
        }
        catch(Throwable _throwException)
        {
            _context.setThrowable(_throwException);
            _sizeError=true;
        }
        boolean _callSuccess=true;
        try
        {
            _context.call("ShowParams","showparams",-1,_localNameConverter,new parameterList(new Object[] {wrk.param_0,wrk.param_1,wrk.param_2,wrk.param_3,wrk.param_4,wrk.param_5,wrk.param_6},new boolean[] {true,true,true,true,true,false,true}),_context.getReturnCode());
        }
        catch(UnwindException _unwindException)
        {
            return _unwindException.unwind(_context,this);
        }
        catch(Throwable _callException)
        {
            _context.setThrowable(_callException);
            _callSuccess=false;
        }
        if(!_callSuccess && _context.callFailure(true,"ShowParams"))
        {
            throw new com.heirloomcomputing.ecs.exception.StopRun("ShowParams");
        }
        _sizeError=!_context.system().display(_context,(String)"Returned from Java. Program terminated.");
        return 0; // fall through
    } // End Paragraph
    
    public int defaultsection_0()
    {
        perform(2,2);
        return 0;
    }
    
    public int getElasticCobolMajorVersion() { return 18; }
    public int getElasticCobolMinorVersion() { return 12; }
    public int getElasticCobolSubminorVersion() { return 2; }
    public String getElasticCobolBuildTimestamp() { return "(Build Dec  2 2018 18:49:17)"; }
    
    
    public void run() // Runnable
    {
        try
        {
            run(-1,-1);
        }
        catch(UnwindException _unwindException)
        {
            return; // completely unwound
        }
        catch(Throwable _anyException)
        {
            CobolException.runtimeError(_context,_anyException);
        }
    }
    
    public void run(int _thread,int _entry) // ICobolInterface
    {
        if(_context==null)
        {
            if(_entry<0) _entry=0;
            setup(null);
        }
        else
        {
            if(_entry<0) _entry=_context.getEntryParagraph();
            _context.setEntryParagraph(0);
        }
        try
        {
            perform(_entry,-1);
            return;
        }
        catch(ExitProgramException _exitProgramException)
        {
            return; // goback
        }
    }
    
    public String redirectCall()
    {
        return null;
    }
    
    static public void main(String _args[]) // application entry
    {
        calljava _programInstance=null;
        try
        {
            _programInstance = new calljava();
            Context.initializeApplication(_programInstance,_args);
            _programInstance.run(-1,-1);
            _programInstance._context.exit();
        }
        catch(Throwable _throwableException)
        {
            if (_programInstance != null && _programInstance._context != null && _programInstance._context.getReturnInt() == 0) 
            {
                   _programInstance._context.setReturnCode(1);
                   Context.appReturnCode = _programInstance._context.getReturnInt();
            }
            CobolException.dumpError(_programInstance,_throwableException,false);
        }
        Context.applicationExit();
    }
    
    public transient Context _context;
    
    public Context setup(Context _passContext)
    {
        _context=_passContext;
        if(_context==null) // create fresh context
        {
            _context=new Context(_passContext,_programId,this);
        }
        else
            _context.setupContext(_passContext,_programId,this);
        wrk=(Wrk)_context.getWrk();
        boolean doInitWrk=false;
        boolean doDeclareWrk=false;
        if(wrk==null)
        {
            doInitWrk=true;
            doDeclareWrk=true;
            _context.setWrk(wrk=new Wrk());
        }
        if(doInitWrk) wrk.doInitializations();
        
        
        if(doDeclareWrk) wrk.doDeclarations();
        return _context;
    }
    
    public void cancel() // close open files, chance for custom action
    {
    } // end cancel
    
    
    public void close() // close any resources that might have been left open
    {
        if(_context.getExistingSqlContext() != null)
        {
            _context.getExistingSqlContext().getCursors().closeAll();
        }
    } // end close
    
    public void perform(int _procedure) // ICobolInterface
    {
        perform(_procedure,_procedure); // only procedure
    }
    
    public void perform(int _begin,int _end) // ICobolInterface
    {
        _debug_loadWatchpoints(_context.getProgramName());
        try
        {
            for(;;) // forever until stopped
            {
                switch(_begin)
                {
                    
                    case 0: // Initial Paragraph
                    _begin=2; break; // starting paragraph
                    case 2: case 1: main_paragraph_OF_defaultsection_0();
                    if(_end==_main_paragraph_OF_defaultsection_0_Label) return  ;
                    
                    if(_end==2) { return   ; } // end SECTION -=-=-=-=-=-=-
                    
                    default: throw ExitProgramException.EXIT_DEFAULT;
                } // end switch
            } // end forever
        }
        catch(UnwindException _unwindException)
        {
            perform(_unwindException.unwind(_context,this),_end);
            return;
        }
        catch(ExitProgramException _exitProgramException)
        {
            throw _exitProgramException;
        }
        catch(Throwable _runtimeException)
        {
            int _resumeAt=_exceptionHandler(_runtimeException,false);
            if(_resumeAt>0) perform(_resumeAt,_resumeAt);
            else throw ExitProgramException.EXIT_RESUME;
        }
    } // end perform(int,int)
    
    public int _exceptionHandler(Throwable _exception,boolean _nextStatementAvailable)
    {
        $X$_exceptionInfo = String.valueOf(_debug_getExceptionLine(_exception));
        _exception.printStackTrace();
        // if debugging in Eclipse pause 
        CobolExceptionPause cbp = new CobolExceptionPause();
        $X$_exceptionInfo="";
        if(_exception instanceof RuntimeException) throw (RuntimeException)_exception;
        if(_exception instanceof Error) throw (Error)_exception;
        throw new com.heirloomcomputing.ecs.exception.EcObject(_exception);
    }
    
    static public final String _localNameConverter[][]=null;
    
} // end program calljava